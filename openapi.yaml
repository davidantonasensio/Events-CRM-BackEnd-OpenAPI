openapi: 3.0.0
info:
  title: idanas Event CRM
  description: |
    This is the EventCRM API to cover Events information.  You can find
    out more about EventCRM at
    [https://www.idanas.de](https://www.idanas.de) or on
    [crm.idanas.de](https://crm.idanas.de)
  termsOfService: https://www.idanas.de
  contact:
    email: david.anton.asensio@gmail.com
  license:
    name: idanas
    url: http://www.idanas.de
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/davidanton/EventCRM/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: event
  description: Everything about your Events
  externalDocs:
    description: Find out more
    url: https://crm.idanas.de
- name: messages
  description: all teh communications from each event
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about eventCRM Api
    url: https://github.com/davidantonasensio/Events-CRM-BackEnd
paths:
  /event:
    get:
      tags:
      - event
      summary: return all the events
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllEvents
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        "400":
          description: Invalid status value
      security:
      - event_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
    post:
      tags:
      - event
      summary: Add a new event to the DB
      operationId: addEvent
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        "405":
          description: Invalid input
      security:
      - event_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
  /event/{eventID}:
    get:
      description: Returns a single event
      operationId: getEventById
      parameters:
      - name: eventID
        in: path
        description: ID of event to return
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/requestBodies/Event'
            application/json:
              schema:
                $ref: '#/components/requestBodies/Event'
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
    put:
      tags:
      - event
      summary: Updates an event in the DB
      operationId: updateEventByID
      parameters:
      - name: eventID
        in: path
        description: ID of event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated User Object
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: succesfull updated event
        "400":
          description: Invalid event ID supplied
        "404":
          description: Event not found
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
    delete:
      tags:
      - event
      summary: Deletes a event
      operationId: deleteEventByID
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: eventID
        in: path
        description: Event id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid event value
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
  /messages/{eventID}:
    post:
      tags:
      - messages
      summary: Place a message from a customer
      operationId: addMessageByEventID
      parameters:
      - name: eventID
        in: path
        description: ID of event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Write a new Message for event in DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        "200":
          description: successful introduced message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          description: Invalid event ID
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
  /messages/{messageID}:
    get:
      tags:
      - messages
      summary: Find messages by eventID
      description: get all teh messages for the given ID. The Id is the event _id
      operationId: getMessagesByEventId
      parameters:
      - name: messageID
        in: path
        description: ID of Message DB
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful found messages for Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          description: Invalid ID supplied
        "404":
          description: Messages not found
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
    delete:
      tags:
      - messages
      summary: Delete messages by MessagesID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteMessagesByEventId
      parameters:
      - name: messageID
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
      responses:
        "200":
          description: Message deleted
        "400":
          description: Invalid messageID supplied
        "404":
          description: Message not found
      security:
      - eventstore_auth:
        - write:eventAdmin
        - read:eventAdmin
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: string
          description: Automatic MongoDB ID
        myEventId:
          type: string
          description: my own ID
        contractStatus:
          type: integer
          description: potential = 0, activ = 1, inactiv = -1
          format: int32
          default: 0
          enum:
          - 1
          - 0
          - -1
        firstContactDate:
          type: string
          format: date-time
        source:
          type: string
          description: Where did the costumer foud us
        budget:
          type: integer
        comments:
          type: string
        eventInfo:
          $ref: '#/components/schemas/EventInfo'
        client1Info:
          $ref: '#/components/schemas/PersonInfo'
        client2Info:
          $ref: '#/components/schemas/PersonInfo'
        contractInfo:
          $ref: '#/components/schemas/ContractInfo'
      xml:
        name: Event
    EventInfo:
      type: object
      properties:
        dateEvent:
          type: string
          format: date-time
        eventLocationName:
          type: string
        eventLocationAddress:
          $ref: '#/components/schemas/Adress'
        contactPerson:
          $ref: '#/components/schemas/PersonInfo'
      xml:
        name: Event
    PersonInfo:
      type: object
      properties:
        clientName:
          type: string
        clientSurname:
          type: string
        clientTel:
          type: string
        clientEmail:
          type: string
        clientAddress:
          $ref: '#/components/schemas/Adress'
      xml:
        name: Event
    Adress:
      type: object
      properties:
        street:
          type: string
        streetNumber:
          type: string
        postalCode:
          type: string
        location:
          type: string
        country:
          type: string
      xml:
        name: Event
    ContractInfo:
      type: object
      properties:
        contractDate:
          type: string
          format: date-time
        services:
          type: string
        products:
          type: string
        totalTime:
          type: string
        totalPrice:
          type: integer
        depositToPay:
          type: integer
        depositPayed:
          type: boolean
        permisionPublic:
          type: boolean
      xml:
        name: Event
    Message:
      type: object
      properties:
        id:
          type: string
          description: Automatic MongoDB ID
        customerid:
          type: string
          description: Automatic MongoDB ID von Event
        myEventId:
          type: string
          description: my own ID
        contactPerson:
          $ref: '#/components/schemas/PersonInfo'
        contactDate:
          type: string
          format: date-time
        messageChanel:
          type: string
        messageText:
          type: string
      xml:
        name: Event
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Event:
      description: Event object that needs to be updated or added to the DB
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    eventstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://crm.idanas.de/oauth/dialog
          scopes:
            write:eventAdmin: modify event in DB
            read:eventAdmin: read your DB
    api_key:
      type: apiKey
      name: api_key
      in: header
