openapi: 3.0.0
info:
  contact:
    email: david.anton.asensio@gmail.com
  description: |
    This is the EventCRM API to cover Events information.  You can find
    out more about EventCRM at
    [https://www.idanas.de](https://www.idanas.de) or on
    [crm2.idanas.de](https://crm2.idanas.de)
  license:
    name: idanas
    url: http://www.idanas.de
  termsOfService: https://www.idanas.de
  title: idanas Event CRM
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/davidanton/EventCRM/1.0.0
- url: https://crm2.idanas.de
- url: http://localhost:3000
tags:
- description: Everything about your Events
  externalDocs:
    description: Find out more
    url: https://crm.idanas.de
  name: event
- description: all teh communications from each event
  name: messages
- description: Operations about user
  externalDocs:
    description: Find out more about eventCRM Api
    url: https://github.com/davidantonasensio/Events-CRM-BackEnd
  name: user
paths:
  /event:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllEvents
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
          description: Something went wrong
      #security:
      #- event_auth:
      #  - write:eventAdmin
      #  - read:eventAdmin
      summary: return all the events
      tags:
      - event
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
      x-eov-operation-handler: controllers/EventController
    post:
      operationId: addEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Add Event Object to DB
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Posted Event
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_405'
          description: Invalid input
      summary: Add a new event to the DB
      tags:
      - event
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
      x-eov-operation-handler: controllers/EventController
  /event/{eventID}:
    delete:
      operationId: deleteEventByID
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Event id to delete
        explode: false
        in: path
        name: eventID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Invalid event value
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_3'
          description: Invalid event value
      summary: Deletes an event
      tags:
      - event
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
      x-eov-operation-handler: controllers/EventController
    get:
      description: Returns a single event given by its ID. Argument passed in must
        be a single String of 12 bytes or a string of 24 hex characters
      operationId: getEventById
      parameters:
      - description: ID of event to return
        explode: false
        in: path
        name: eventID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
          description: Invalid ID supplied
      tags:
      - event
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
      x-eov-operation-handler: controllers/EventController
    put:
      description: Update a event given by its ID. Argument passed in must be a single
        String of 12 bytes or a string of 24 hex characters
      operationId: updateEventByID
      parameters:
      - description: ID of event that needs to be updated
        explode: false
        in: path
        name: eventID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Updated Event Object in DB
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: succesfull updated event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
          description: Invalid event ID supplied
      summary: Updates an event in the DB
      tags:
      - event
      x-openapi-router-controller: EventController
      x-openapi-router-service: EventService
      x-eov-operation-handler: controllers/EventController
  /task:
    get:
      description: Get all existing tasks in DB
      operationId: getAllTasks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: All Tasks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
          description: Tasks not found
      summary: Get all Tasks
      tags:
      - task
      x-openapi-router-controller: TaskController
      x-openapi-router-service: TaskService
      x-eov-operation-handler: controllers/TaskController
    post:
      operationId: addTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Add Task Object to DB
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Created Task
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_405_1'
          description: Invalid input
      summary: Add a new task to the DB
      tags:
      - task
      x-openapi-router-controller: TaskController
      x-openapi-router-service: TaskService
      x-eov-operation-handler: controllers/TaskController
  /task/{eventOrTaskID}:
    delete:
      description: Delete task by task ID. Argument passed in must be a single String
        of 12 bytes or a string of 24 hex characters
      operationId: deleteTaskByTaskId
      parameters:
      - description: ID of the task that needs to be deleted from the DB
        explode: false
        in: path
        name: eventOrTaskID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Deleted Task
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_6'
          description: Invalid Task ID supplied
      summary: Delete task by Task ID
      tags:
      - task
      x-openapi-router-controller: TaskController
      x-openapi-router-service: TaskService
      x-eov-operation-handler: controllers/TaskController
    get:
      description: get all the tasks for the given Event ID. The Id is the event _id.
        Argument passed in must be a single String of 12 bytes or a string of 24 hex
        characters
      operationId: getTasksByEventId
      parameters:
      - description: ID of Event DB
        explode: false
        in: path
        name: eventOrTaskID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
          description: successful found tasks for Event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
          description: Tasks for supplied ID not found
      summary: Find Tasks by eventID
      tags:
      - task
      x-openapi-router-controller: TaskController
      x-openapi-router-service: TaskService
      x-eov-operation-handler: controllers/TaskController
    put:
      description: Update task for the given task ID. The Id is the task _id. Argument
        passed in must be a single String of 12 bytes or a string of 24 hex characters
      operationId: updateTask
      parameters:
      - description: ID of the task that needs to be updated
        explode: false
        in: path
        name: eventOrTaskID
        required: true
        schema:
          minimum: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Updated Task
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
          description: Task not found, ID not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
          description: Invalid input
      summary: Add a new task to the DB
      tags:
      - task
      x-openapi-router-controller: TaskController
      x-openapi-router-service: TaskService
      x-eov-operation-handler: controllers/TaskController
  /calender:
    get:
      description: Get all existing dates in DB
      operationId: getAllDates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/calender'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/calender'
                type: array
          description: All dates in Calender
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
          description: calenders not found
      summary: Get all dates
      tags:
      - calender
      x-openapi-router-controller: CalenderController
      x-openapi-router-service: CalenderService
      x-eov-operation-handler: controllers/CalenderController
    post:
      operationId: addDate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calender'
        description: Add date Object to DB
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/calender'
          description: Date created
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_405_2'
          description: Invalid input
      summary: Add a new date to calender into DB
      tags:
      - calender
      x-openapi-router-controller: CalenderController
      x-openapi-router-service: CalenderService
      x-eov-operation-handler: controllers/CalenderController
  /calender/{eventOrCalenderID}:
    delete:
      description: Delete date by date ID. Argument passed in must be a single String
        of 12 bytes or a string of 24 hex characters
      operationId: deleteDateByDateId
      parameters:
      - description: ID of the date that needs to be deleted from the DB
        explode: false
        in: path
        name: eventOrCalenderID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Deleted date
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_9'
          description: Invalid date ID supplied
      summary: Delete date by date ID
      tags:
      - calender
      x-openapi-router-controller: CalenderController
      x-openapi-router-service: CalenderService
      x-eov-operation-handler: controllers/CalenderController
    get:
      description: get all the Dates for the given Event ID. The Id is the event _id.
        Argument passed in must be a single String of 12 bytes or a string of 24 hex
        characters
      operationId: getAllDatesByEventId
      parameters:
      - description: ID of Event DB
        explode: false
        in: path
        name: eventOrCalenderID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/calender'
            application/xml:
              schema:
                $ref: '#/components/schemas/calender'
          description: successful found dates for Event id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_7'
          description: Dates for supplied ID not found
      summary: Find dates by eventID
      tags:
      - calender
      x-openapi-router-controller: CalenderController
      x-openapi-router-service: CalenderService
      x-eov-operation-handler: controllers/CalenderController
    put:
      description: Update dates for the given date ID. The Id is the date. Argument
        passed in must be a single String of 12 bytes or a string of 24 hex characters
      operationId: updateDateByID
      parameters:
      - description: ID of the date that needs to be updated
        explode: false
        in: path
        name: eventOrCalenderID
        required: true
        schema:
          minimum: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calender'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/calender'
          description: Updated date
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_8'
          description: date not found, ID not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_8'
          description: Invalid input
      summary: Add a new calender to the DB
      tags:
      - calender
      x-openapi-router-controller: CalenderController
      x-openapi-router-service: CalenderService
      x-eov-operation-handler: controllers/CalenderController
  /messages:
    post:
      description: Add a nuw message to an event given by its ID.
      operationId: addMessageByEventID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: Write a new Message for event in DB
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
          description: successful introduced message
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_10'
          description: Invalid event ID
      summary: Place a message from a customer
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
  /messages/{eventOrMessageID}:
    delete:
      description: Delete message by MessageID. Argument passed in must be a single
        String of 12 bytes or a string of 24 hex characters
      operationId: deleteMessagesByMessagesId
      parameters:
      - description: ID of the message that needs to be deleted from the DB
        explode: false
        in: path
        name: eventOrMessageID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Message deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_13'
          description: Invalid messageID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
          description: Message not found
      summary: Delete messages by MessagesID
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
    get:
      description: get all the messages for the given Event ID. The Id is the event
        _id. Argument passed in must be a single String of 12 bytes or a string of
        24 hex characters
      operationId: getMessagesByEventId
      parameters:
      - description: ID of event DB
        explode: false
        in: path
        name: eventOrMessageID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
          description: successful found messages for Event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_11'
          description: Invalid ID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_11'
          description: Messages not found
      summary: Find messages by eventID
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
    put:
      description: Update one message of one event. Argument passed in must be a single
        String of 12 bytes or a string of 24 hex characters
      operationId: updateMessagesByMessageId
      parameters:
      - description: ID of the event that needs to be updated
        explode: false
        in: path
        name: eventOrMessageID
        required: true
        schema:
          minimum: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
          description: Message updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_12'
          description: Invalid messageID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_12'
          description: Message not found
      summary: Update messages by MessagesID
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
  /messages/delAll/{eventOrMessageID}:
    delete:
      description: Delete All the messages from a given eventID. Argument passed in
        must be a single String of 12 bytes or a string of 24 hex characters
      operationId: deleteAllMessagesByEventId
      parameters:
      - description: ID of the Event that needs to be deleted
        explode: false
        in: path
        name: eventOrMessageID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Message deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_14'
          description: Invalid messageID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
          description: Message not found
      summary: Delete messages by MessagesID
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
  /messages/getOneMessage/{eventOrMessageID}:
    get:
      description: Get just one message from a given Message ID. Argument passed in
        must be a single String of 12 bytes or a string of 24 hex characters
      operationId: getOneMessagesById
      parameters:
      - description: ID of the Message
        explode: false
        in: path
        name: eventOrMessageID
        required: true
        schema:
          format: int64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            application/xml:
              schema:
                $ref: '#/components/schemas/Message'
          description: successful found message for ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_15'
          description: Invalid messageID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_15'
          description: Message not found
      summary: Delete messages by MessagesID
      tags:
      - messages
      x-openapi-router-controller: MessagesController
      x-openapi-router-service: MessagesService
      x-eov-operation-handler: controllers/MessagesController
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
      summary: Create user
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
  /user/createWithArray:
    post:
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
  /user/createWithList:
    post:
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
  /user/login:
    get:
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_16'
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
  /user/logout:
    get:
      operationId: logoutUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_default'
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_19'
          description: Invalid username supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_19'
          description: User not found
      summary: Delete user
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
    get:
      operationId: getUserByName
      parameters:
      - description: The name that needs to be fetched. Use user1 for testing.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_17'
          description: Invalid username supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_17'
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be updated
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_18'
          description: Invalid user supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_18'
          description: User not found
      summary: Updated user
      tags:
      - user
      x-openapi-router-controller: UserController
      x-openapi-router-service: UserService
      x-eov-operation-handler: controllers/UserController
components:
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event object that needs to be updated or added to the DB
      required: true
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
      required: true
  schemas:
    Event:
      example:
        _id: 5e54eaeeefa28026d8e6eb4f
        userId: 5e54eaeeefa28026d8e6eb4f
        myEventId: 20200704_She1-He1
        comments: Comments-01
        source: Source-01
        firstContactDate: 2020-01-23T12:56:07.000Z
        contractStatus: 0
        budget: 3000
        typeEvent: wedding
        eventInfo:
          dateEvent: 2020-07-04T11:00:00.000Z
          eventLocationName: EventLocation-01
          eventLocationAddress:
            streetNumber: 18
            street: Street-01
            postalCode: 77777
            location: Location-01
            country: Germany
        contactPerson:
          clientName: SheName-01
          clientSurname: SheSurname-01
          clientTel: 1234567890
          clientEmail: SheName-01@email.com
          clientAddress:
            street: StreetName-01
            streetNumber: 13
            postalCode: 77777
            location: Location-01
            country: Country-01
        contractInfo:
          depositPayed: false
          depositToPay: 1000
          contractDate: 2020-02-23T04:56:07.000Z
          totalPrice: 3000
          totalTime: 10
          services: Services-01
          permisionPublic: true
          products: Products-01
        client1Info:
          clientName: SheName-01
          clientSurname: SheSurname-01
          clientEmail: SheName-01@email.com
          clientTel: 1234567890
          clientAddress:
            street: StreetName-01
            streetNumber: 14
            postalCode: 77777
            location: Location-01
            country: Country-01
        client2Info:
          clientName: ErName-01
          clientSurname: ErSurname-01
          clientEmail: ErName-01@email.com
          clientTel: 1234567890
          clientAddress:
            street: StreetName-01
            streetNumber: 14
            postalCode: 77777
            location: Location-01
            country: Country-01
      properties:
        _id:
          description: Automatic MongoDB ID
          type: string
        userId:
          description: User ID
          type: string
        myEventId:
          description: my own ID
          type: string
        contractStatus:
          default: 0
          description: potential = 0, activ = 1, inactiv = -1
          enum:
          - 1
          - 0
          - -1
          format: int32
          type: integer
        firstContactDate:
          format: date-time
          type: string
        source:
          description: Where did the costumer foud us
          type: string
        budget:
          type: integer
        typeEvent:
          type: string
        comments:
          type: string
        eventInfo:
          $ref: '#/components/schemas/EventInfo'
        client1Info:
          $ref: '#/components/schemas/PersonInfo'
        client2Info:
          $ref: '#/components/schemas/PersonInfo'
        contractInfo:
          $ref: '#/components/schemas/ContractInfo'
      type: object
      xml:
        name: Event
    EventInfo:
      example:
        dateEvent: 2000-01-23T04:56:07.000Z
        eventLocationName: eventLocationName
        eventLocationAddress:
          country: country
          streetNumber: streetNumber
          street: street
          postalCode: postalCode
          location: location
        contactPerson:
          clientTel: clientTel
          clientName: clientName
          clientEmail: clientEmail
          clientSurname: clientSurname
          clientAddress:
            country: country
            streetNumber: streetNumber
            street: street
            postalCode: postalCode
            location: location
      properties:
        dateEvent:
          format: date-time
          type: string
        eventLocationName:
          type: string
        eventLocationAddress:
          $ref: '#/components/schemas/Adress'
        contactPerson:
          $ref: '#/components/schemas/PersonInfo'
      type: object
      xml:
        name: Event
    PersonInfo:
      example:
        clientTel: clientTel
        clientName: clientName
        clientEmail: clientEmail
        clientSurname: clientSurname
        clientAddress:
          country: country
          streetNumber: streetNumber
          street: street
          postalCode: postalCode
          location: location
      properties:
        clientName:
          type: string
        clientSurname:
          type: string
        clientTel:
          type: string
        clientEmail:
          type: string
        clientAddress:
          $ref: '#/components/schemas/Adress'
      type: object
      xml:
        name: Event
    Adress:
      example:
        country: country
        streetNumber: streetNumber
        street: street
        postalCode: postalCode
        location: location
      properties:
        street:
          type: string
        streetNumber:
          type: string
        postalCode:
          type: string
        location:
          type: string
        country:
          type: string
      type: object
      xml:
        name: Event
    ContractInfo:
      example:
        depositPayed: false
        contractDate: 2000-01-23T04:56:07.000Z
        totalPrice: 3000
        totalTime: totalTime
        depositToPay: 657
        services: services
        permisionPublic: true
        products: products
      properties:
        contractDate:
          format: date-time
          type: string
        services:
          type: string
        products:
          type: string
        totalTime:
          type: string
        totalPrice:
          type: integer
        depositToPay:
          type: integer
        depositPayed:
          type: boolean
        permisionPublic:
          type: boolean
      type: object
      xml:
        name: Event
    Message:
      example:
        _id: 5e54eaeeefa28026d8e6eb4f
        userId: 5e54eaeeefa28026d8e6eb4f
        eventId: 5e54eaeeefa28026d8e6eb4f
        myEventId: 20200704_She-01-He-01
        messageText: MessageText
        messageChanel: Email
        contactDate: 2020-01-23T04:56:07.000Z
        contactPerson: Angela Merkel
      properties:
        _id:
          description: ID von the message
          type: string
        eventid:
          description: ID von the Event collection(_id)
          type: string
        userId:
          description: User ID
          type: string
        myEventId:
          description: my own ID
          type: string
        contactPerson:
          type: string
        contactDate:
          format: date-time
          type: string
        messageChanel:
          type: string
        messageText:
          type: string
      type: object
      xml:
        name: Event
    Task:
      example:
        _id: 5e54eaeeefa28026d8e6eb4f
        eventId: 5e54eaeeefa28026d8e6eb4f
        userId: 5e54eaeeefa28026d8e6eb4f
        userName: David Anton
        title: Load bateries
        piority: 1, 2 or 3
        percentageDone: 0%
        categorie: Wedding
        parentTask: none
        list: Buying
        tags: Luxemburg, reserve, hotel
        location: Oberkich
        taskBody: Here comes the Task text
        alarm: true
        alarmDateTime: 2020-01-23T12:56:07.000Z
        alarmMedium: email, popup
        dateCreated: 2020-01-23T04:56:07.000Z
        dateUpdated: 2020-01-23T04:56:07.000Z
        dateStart: 2020-01-23T04:56:07.000Z
        dateEnd: 2020-01-23T04:56:07.000Z
        dateCompleted: 2020-01-23T04:56:07.000Z
        files: pdffile.pdf
      properties:
        _id:
          description: ID von the task
          type: string
        eventId:
          description: Event Id in DB
          type: string
        userId:
          description: If there is a concret user
          type: string
        title:
          description: Title of the task
          type: string
        taskBody:
          description: Body of task
          type: string
        piority:
          default: 3
          description: Priority 1-height, 2-medium, 3-low
          enum:
          - 1
          - 2
          - 3
          format: int32
          type: integer
        percentageDone:
          default: 0
          description: Done 0%, 25%, 50%, 75%, 100%
          enum:
          - 0
          - 25
          - 50
          - 75
          - 100
          format: int32
          type: integer
        category:
          description: Task Category
          type: string
        parentTask:
          description: in This task is a subtask, the name of parent
          type: string
        list:
          description: List to wich this task belong
          type: string
        tags:
          description: Keywords or tags in relation with task
          type: string
        location:
          description: If there is a location in relation with the task
          type: string
        alarm:
          description: true or false
          type: boolean
        alarmDateTime:
          description: Date and time for the alarm
          format: date-time
          type: string
        alarmMedium:
          description: Email, popup
          type: string
        firstContactDate:
          format: date-time
          type: string
        dateCreated:
          description: Task creation Date
          format: date-time
          type: string
        dateUpdated:
          description: Date for the last update
          format: date-time
          type: string
        dateStart:
          description: Programed date to start the task
          format: date-time
          type: string
        dateEnd:
          description: Programed date to end the task
          format: date-time
          type: string
        dateCompletion:
          description: Date of completion
          format: date-time
          type: string
        files:
          description: atached files to the task
          format: binary
          type: string
      type: object
      xml:
        name: Event
    calender:
      example:
        _id: 5e54eaeeefa28026d8e6eb4f
        eventId: 5e54eaeeefa28026d8e6eb4f
        userId: 5e54eaeeefa28026d8e6eb4f
        dateTimeBegin: 2020-01-23T12:56:07.000Z
        dateTimeEnd: 2020-01-23T12:56:07.000Z
        calenderName: Weddings
        title: Meeting with Groom
        body: Any description here
        location: Oberkirch
        piority: 3
        category: Weddings
        tags: Some Tags separated with coma
        status: 0
        alarm: true
        alarmDateTime: 2020-01-23T12:56:07.000Z
        alarmMedium: Email
        files: finle.pdf
      properties:
        _id:
          description: ID von the task
          type: string
        eventId:
          description: Event Id in DB
          type: string
        userId:
          description: If there is a concret user
          type: string
        dateTimeBegin:
          description: Programed initial date and time
          format: date-time
          type: string
        dateTimeEnd:
          description: Programed end date and time
          format: date-time
          type: string
        calenderName:
          description: general is defualt calender
          type: string
        title:
          description: Title of the date
          type: string
        body:
          description: body or message of the date
          type: string
        location:
          description: If there is a location in relation with the task
          type: string
        piority:
          default: 3
          description: Priority 1-height, 2-medium, 3-low
          enum:
          - 1
          - 2
          - 3
          format: int32
          type: integer
        category:
          description: Task Category
          type: string
        tags:
          description: Keywords or tags in relation with task
          type: string
        status:
          default: 0
          description: Date Status 0-No estatus 1-Provisional, 2-Confirmed, 3-Canceled
          enum:
          - 0
          - 1
          - 2
          - 3
          format: int32
          type: integer
        alarm:
          description: true or false
          type: boolean
        alarmDateTime:
          description: Date and time for the alarm
          format: date-time
          type: string
        alarmMedium:
          description: Email, popup
          type: string
        files:
          description: atached files to the task
          format: binary
          type: string
      type: object
      xml:
        name: Event
    User:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          description: If there is a concret user
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      type: object
      xml:
        name: User
    ApiResponse:
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
    inline_response_400:
      properties:
        Error:
          description: Error processing get Events
          example: Error processing get Events
          type: string
      type: object
    inline_response_405:
      properties:
        Error:
          description: Error processing post new Events
          example: Error processing post new Events
          type: string
      type: object
    inline_response_400_1:
      properties:
        Error:
          description: Error getting Events by its ID
          example: Error deleting Events by its ID
          type: string
      type: object
    inline_response_400_2:
      properties:
        Error:
          description: Error updating Events by its ID
          example: Error updating Events by its ID
          type: string
      type: object
    inline_response_200:
      example:
        Error: Succesfuly deleted Event and its resources
      properties:
        Error:
          description: Succesfuly deleted Event and its resources
          example: Succesfuly deleted Event and its resources
          type: string
      type: object
    inline_response_400_3:
      properties:
        Error:
          description: Error deleting Events by its ID
          example: Error deleting Events by its ID
          type: string
      type: object
    inline_response_404:
      properties:
        Error:
          description: Error getting All the tasks
          example: Error getting All the tasks
          type: string
      type: object
    inline_response_405_1:
      properties:
        message:
          description: Error Posting task
          example: Error Posting task
          type: string
      type: object
    inline_response_400_4:
      properties:
        message:
          description: Error getting task by ID
          example: Error getting task by ID
          type: string
      type: object
    inline_response_400_5:
      properties:
        message:
          description: Not possible to update task by ID
          example: Not possible to update task by ID
          type: string
      type: object
    inline_response_200_1:
      example:
        message: Complete Task has been deleted
      properties:
        message:
          description: Specified task has been deleted
          example: Complete Task has been deleted
          type: string
      type: object
    inline_response_400_6:
      properties:
        message:
          description: Invalid task ID supplied
          example: Invalid task ID supplied or task not found
          type: string
      type: object
    inline_response_404_1:
      properties:
        Error:
          description: Error getting All the dates
          example: Error getting All the dates
          type: string
      type: object
    inline_response_405_2:
      properties:
        message:
          description: Error Posting date
          example: Error Posting date
          type: string
      type: object
    inline_response_400_7:
      properties:
        message:
          description: Error getting dates by ID
          example: Error getting dates by ID
          type: string
      type: object
    inline_response_400_8:
      properties:
        message:
          description: Not possible to update date by ID
          example: Not possible to update date by ID
          type: string
      type: object
    inline_response_200_2:
      example:
        message: Complete date has been deleted
      properties:
        message:
          description: Specified date has been deleted
          example: Complete date has been deleted
          type: string
      type: object
    inline_response_400_9:
      properties:
        message:
          description: Invalid date ID supplied
          example: Invalid date ID supplied or date not found
          type: string
      type: object
    inline_response_400_10:
      properties:
        message:
          description: Invalid event ID
          example: Invalid event ID
          type: string
      type: object
    inline_response_400_11:
      properties:
        message:
          description: Not posible to get message by ID
          example: Invalid task ID supplied or task not found
          type: string
      type: object
    inline_response_400_12:
      properties:
        message:
          description: Not posible to update message by ID
          example: Not posible to update message by ID
          type: string
      type: object
    inline_response_200_3:
      example:
        message: Complete Message has been deleted
      properties:
        message:
          description: Specified Message has been deleted
          example: Complete Message has been deleted
          type: string
      type: object
    inline_response_400_13:
      properties:
        message:
          description: Invalid messageID suppliedd
          example: Invalid messageID supplied
          type: string
      type: object
    inline_response_404_2:
      properties:
        message:
          description: Message not found
          example: Message not found
          type: string
      type: object
    inline_response_200_4:
      example:
        message: Message deleted
      properties:
        message:
          description: Message deleted
          example: Message deleted
          type: string
      type: object
    inline_response_400_14:
      properties:
        message:
          description: Invalid messageID supplied
          example: Invalid messageID supplied
          type: string
      type: object
    inline_response_400_15:
      properties:
        message:
          description: Not possible to get message by ID
          example: Not possible to get message by ID
          type: string
      type: object
    inline_response_200_5:
      example:
        login: Succesfull login
      properties:
        login:
          description: Succesfull login
          example: Succesfull login
          type: string
      type: object
    inline_response_400_16:
      properties:
        login:
          description: Not possible to login
          example: Not possible to login
          type: string
      type: object
    inline_response_default:
      example:
        login: Successful Logout
      properties:
        login:
          description: Successful Logout
          example: Successful Logout
          type: string
      type: object
    inline_response_400_17:
      properties:
        login:
          description: Not possible to Get User by Name
          example: Not possible to Get User by Name
          type: string
      type: object
    inline_response_400_18:
      properties:
        login:
          description: Not possible to update User by Name
          example: Not possible to update User by Name
          type: string
      type: object
    inline_response_400_19:
      properties:
        login:
          description: Not possible delete User
          example: Not possible delete User
          type: string
      type: object
  securitySchemes:
    eventstore_auth:
      flows:
        implicit:
          authorizationUrl: https://crm2.idanas.de/oauth/dialog
          scopes:
            write:eventAdmin: modify event in DB
            read:eventAdmin: read your DB
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
